package com.amazon.aws.gcr.csdc.clickstream.server;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;
import software.amazon.awssdk.services.kinesis.model.DescribeStreamRequest;
import software.amazon.awssdk.services.kinesis.model.DescribeStreamResponse;
import software.amazon.awssdk.services.kinesis.model.PutRecordRequest;
import software.amazon.kinesis.common.KinesisClientUtil;

import java.util.concurrent.ExecutionException;

public class KinesisProducer implements MessageProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(KinesisProducer.class);

    private String streamName;
    private KinesisAsyncClient kinesisClient;

    public KinesisProducer(String streamName, String regionName) {
        LOGGER.info("streamName: {}, regionName: {}", streamName, regionName);
        this.streamName = streamName;
        Region region = Region.of(regionName);
        this.kinesisClient = KinesisClientUtil.createKinesisAsyncClient(KinesisAsyncClient.builder().region(region));
        validateStream(kinesisClient, streamName);
    }

    private static void validateStream(KinesisAsyncClient kinesisClient, String streamName) {
        try {
            DescribeStreamRequest describeStreamRequest = DescribeStreamRequest.builder().streamName(streamName).build();
            DescribeStreamResponse describeStreamResponse = kinesisClient.describeStream(describeStreamRequest).get();
            if (!describeStreamResponse.streamDescription().streamStatus().toString().equals("ACTIVE")) {
                LOGGER.error("Stream " + streamName + " is not active. Please wait a few moments and try again.");
            }
        } catch (Exception e) {
            LOGGER.error("Error found while describing the stream " + streamName);
            LOGGER.error(Utils.getFullStackTrace(e));
            throw new RuntimeException(e);
        }
    }

    public void close() {
        this.kinesisClient.close();
    }

    private void send(Message m, boolean sync) {
        LOGGER.info("send {}, sync: {}", m.getRid(), sync);
        byte[] bytes = Utils.toJsonAsBytes(m);
        if (bytes == null) {
            LOGGER.warn("Could not get JSON bytes for message");
            return;
        }
        PutRecordRequest request = PutRecordRequest.builder()
                .partitionKey(m.getRid())
                .streamName(streamName).data(SdkBytes.fromByteArray(bytes)).build();
        try {
            if (sync) {
                kinesisClient.putRecord(request).get();
            } else {
                kinesisClient.putRecord(request);
            }
        } catch (InterruptedException e) {
            LOGGER.info("Interrupted, assuming shutdown.");
        } catch (ExecutionException e) {
            LOGGER.error("Exception while sending data to Kinesis. Will try again next cycle.", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public void sendAsync(Message m) {
        this.send(m, false);
    }

    @Override
    public void sendSync(Message m) {
        this.send(m, true);
    }

    @Override
    public String getName() {
        return "kinesisProducer";
    }
}
